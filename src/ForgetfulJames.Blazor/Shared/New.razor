@using ForgetfulJames.Dto.Entities;
@using System.Text.Json;
@using System.Text;
@using System.Security.Claims;
@using static System.Net.Mime.MediaTypeNames;
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthState

<div class="pb-2">
    <div class="card">
        <div class="card-body">
            <div class="d-flex flex-row align-items-center">
                <input type="text" class="form-control form-control-lg" id="exampleFormControlInput1" placeholder="Add new..." @bind-value="toDo.Name" >
                <a href="#!" data-mdb-toggle="tooltip" title="Set due date">
                    <i class="fas fa-calendar-alt fa-lg me-3"></i>
                </a>
                <div>
                    <button type="submit" class="btn btn-primary" @onclick="AddToDo">Add</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string userId = string.Empty;
    private ToDoDto toDo = new();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        userId = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

        await base.OnInitializedAsync();
    }

    private async Task AddToDo()
    {
        if (string.IsNullOrEmpty(toDo.Name))
        {
            errorMessage = "Please provide a name for your list.";
            return;
        }

        toDo.UserId = userId;

        var toDoJson = new StringContent(
            JsonSerializer.Serialize(toDo),
            Encoding.UTF8,
            Application.Json
        );

        var client = ClientFactory.CreateClient("Api");
        using var response = await client.PostAsync("api/v1/ToDo/AddAsync", toDoJson);
        if (response.IsSuccessStatusCode)
        {
            toDo.Name = string.Empty;
        }
    }
}
